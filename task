--------------------------------

Задание 1

Получить карточку товара исходя из ее группы.
Имеются следующие таблицы:

Таблица с группами товаров:

group (
    groupId VARCHAR(200) UNIQUE NOT NULL,
    parentId VARCHAR(200),
    name VARCHAR(200) NOT NULL
);

группы могут быть вложенными, например Техника -> Бытовая техника -> Пылесосы
(группа в группе - ее parentId = groupId родителя, у корневой группы parentId = null)


Таблица с карточками товаров для группы:

positionCard (
    id VARCHAR(200) PRIMARY KEY,
    isShowInApp BOOLEAN DEFAULT FALSE,
    name VARCHAR(200),
    groupId VARCHAR(200) NOT NULL UNIQUE
);

Карточти товаров назначаются на группы.

Написать sql запрос для получения имени (positionCard.name) карточки
товара по его группе, groupId - параметр запроса.
Если у группы не задана карточка товара, то тогда к
этому товару прмиеняется карточка ее родительской группы, и т.д.
Если карточка может быть не задана ни у кого.
Реализовать за 1 sql запрос.

--------------------------------

Задание 2

Реализовать получение/обновление токена для доступа к сторонней системе, например для
отправки сообщений. Токен требуется в одном экземпляре на сервере и имеет конечное время
жизни, например пол часа.

Вам дан класс для работы с токеном TokenProvider и сам Token:

class TokenProvider {

   // возвращает токен
   public Token getToken() throws SomeExсeptions {
      // ..
   }

}

class Token {

   // возвращает время окончания токена
   public Date getExpirationTime() {
      // ..
   }

   // обновляет токен
   public void refresh() throws SomeExсeptions {
      // ..
   }

}

Требуется реализовать класс TokenUtil с одним методом getToken()
возвращающим валидный Token или null в случае неуспешного получения.
Функция getToken должна отработать максимум за 15 секунд, при этом
по возможности слать минимальное число запросов TokenProvider.getToken() и
Token.refresh(). Учесть что функции TokenProvider.getToken() и Token.refresh()
шлют запросы к сторонней системе и могут отрабатывать очень долго или
вообще повиснуть. Поскольку это все на сервере, реализуемую функцию
TokenUtil.getToken() могут вызвать много потоков одновременно.